
%token RETURN IDENTIFIER CONSTANT INT CHAR STRING_LITERAL
%token MUL_ASSIGN DIV_ASSIGN MOD_ASSIGN ADD_ASSIGN SUB_ASSIGN LEFT_ASSIGN RIGHT_ASSIGN AND_ASSIGN XOR_ASSIGN OR_ASSIGN
%token EOF
%token STRUCT ENUM UNION
%token SHORT LONG SIGNED UNSIGNED
%token FLOAT DOUBLE VOID BOOL STATIC SIZEOF
%token TYPEDEF DO CONST
%start program

program
    : external_statement external_statement_prime
    ;

external_statement
    : function_declaration
    | variable_declarations_and_optional_assignments ';'
    | variable_assignment ';'
    | struct_or_union_declaration ';'
    | typedef_declaration ';'
    | enum_declaration ';'
    ;

external_statement_prime
    : external_statement external_statement_prime
    | EOF
    ;

typedef_declaration
    : TYPEDEF total_type pointer_optional IDENTIFIER
    | TYPEDEF enum_declaration IDENTIFIER
    | TYPEDEF struct_or_union_declaration IDENTIFIER
    ;

enum_declaration
    : ENUM identifier_optional '{' enum_member_list '}'
    ;

enum_member_list
    : IDENTIFIER '=' CONSTANT enum_member_list_prime
    | IDENTIFIER enum_member_list_prime
    ;

enum_member_list_prime
    : ',' IDENTIFIER '=' CONSTANT enum_member_list_prime
    | ',' IDENTIFIER enum_member_list_prime
    | epsilon
    ;

struct_or_union
    : STRUCT
    | UNION
    ;

struct_or_union_declaration
    : struct_or_union identifier_optional '{' struct_or_union_member_list '}'
    ;

struct_or_union_member_list
    : variable_declarations_and_no_assignments ';' struct_or_union_member_list_prime
    ;

struct_or_union_member_list_prime
    : variable_declarations_and_no_assignments ';' struct_or_union_member_list_prime
    | epsilon
    ;

variable_declarations_and_no_assignments
    : total_type pointer_optional IDENTIFIER array_optional variable_declarations_and_no_assignments_prime
    ;

variable_declarations_and_no_assignments_prime
    : ',' pointer_optional IDENTIFIER array_optional variable_declarations_and_no_assignments_prime
    | epsilon
    ;

variable_declarations_and_optional_assignments
    : total_type pointer_optional IDENTIFIER array_optional optional_assignment variable_declarations_and_optional_assignments_prime
    ;

variable_assignment
    : IDENTIFIER array_optional assignment
    ;

variable_declarations_and_optional_assignments_prime
    : ',' pointer_optional IDENTIFIER array_optional optional_assignment variable_declarations_and_optional_assignments_prime
    | epsilon
    ;

function_declaration
    : total_type IDENTIFIER '(' argument_list ')' '{' scope_drop statement_prime return_statement scope_rise '}'
    ;

argument_list
    : argument argument_list_prime
    | epsilon
    ;

argument_list_prime
    : ',' argument argument_list_prime
    | epsilon
    ;

argument
    : total_type pointer_optional IDENTIFIER array_optional
    ;

identifier_optional
    : IDENTIFIER
    | epsilon
    ;

pointer_optional
    : '*' pointer_optional_prime
    | epsilon
    ;

pointer_optional_prime
    : '*' pointer_optional_prime
    | epsilon
    ;

array_optional
    : '[' constant_expr ']' array_optional_prime
    | '[' ']' array_optional_prime
    | epsilon
    ;

array_optional_prime
    : '[' constant_expr ']' array_optional_prime
    | '[' ']' array_optional_prime
    | epsilon
    ;

sizeof_expr
    : SIZEOF '(' total_type ')'
    | SIZEOF '(' IDENTIFIER ')'
    ;

statement_prime
    : statement statement_prime
    | epsilon
    ;

statement
    : compound_statement
    | IDENTIFIER array_optional assignment ';'
    | variable_declarations_and_optional_assignments ';'
    | struct_or_union_declaration ';'
    | enum_declaration ';'
    ;

compound_statement
    : '{' scope_drop statement statement_prime scope_rise '}'
    ;

scope_rise
    : epsilon
    ;

scope_drop
    : epsilon
    ;

return_statement
    : RETURN expression ';'
    ;

total_type
    : type_qualifier_list type
    | struct_or_union IDENTIFIER
    | ENUM IDENTIFIER
    ;

type_qualifier_list
    : type_qualifier type_qualifier_list_prime
    | epsilon
    ;

type_qualifier_list_prime
    : type_qualifier type_qualifier_list_prime
    | epsilon
    ;

type_qualifier
    : SHORT
    | LONG
    | SIGNED
    | UNSIGNED
    | STATIC
    | CONST
    ;

type
    : INT
    | CHAR
    | SHORT
    | LONG
    | FLOAT
    | DOUBLE
    | VOID
    | BOOL
    | IDENTIFIER
    ;

assignment
    : assignment_operator expression
    | assignment_operator initializer
    ;

initializer
    : '{' initializer_list '}'
    ;

initializer_list
    : CONSTANT initializer_list_prime
    ;

initializer_list_prime
    : ',' CONSTANT initializer_list_prime
    | epsilon
    ;

optional_assignment
    : assignment
    | epsilon
    ;

assignment_operator
	: '='
	| MUL_ASSIGN
	| DIV_ASSIGN
	| MOD_ASSIGN
	| ADD_ASSIGN
	| SUB_ASSIGN
	| LEFT_ASSIGN
	| RIGHT_ASSIGN
	| AND_ASSIGN
	| XOR_ASSIGN
	| OR_ASSIGN
	;

cast_expression
    : '(' total_type pointer_optional ')' expression
    ;

value
    : plus_or_minus CONSTANT
    | IDENTIFIER array_optional
    | STRING_LITERAL
    ;

plus_or_minus
    : '+'
    | '-'
    | epsilon
    ;

pointer
	: '*' pointer_prime
	;

pointer_prime
    : '*' pointer_prime
    | epsilon
    ;

expression
   : term expression_prime
   ;

expression_prime
    : '+' term expression_prime
    | '-' term expression_prime
    | epsilon
    ;

term
    : factor term_prime
    ;

term_prime
    : '*' factor term_prime
    | '/' factor term_prime
    | '%' factor term_prime
    | epsilon
    ;

factor
    : cast_expression
    | '(' expression ')'
    | sizeof_expr
    | value
    ;

constant_expr
   : constant_term constant_expr_prime
   ;

constant_expr_prime
    : '+' constant_term constant_expr_prime
    | '-' constant_term constant_expr_prime
    | epsilon
    ;

constant_term
    : constant_factor constant_term_prime
    ;

constant_term_prime
    : '*' constant_factor constant_term_prime
    | '/' constant_factor constant_term_prime
    | '%' constant_factor constant_term_prime
    | epsilon
    ;

constant_factor
    : cast_expression
    | '(' constant_expr ')'
    | constant_value
    ;

constant_value
    : CONSTANT
    | sizeof_expr
    ;