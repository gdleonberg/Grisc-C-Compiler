"""
 modified version of grammar from http://www.quut.com/c/ANSI-C-grammar-y-1999.html
 removed 
	- union
    - auto
    - register
    - static
    - extern
    - const
    - enum
    - typedef
    - volatile
    - complex
    - imaginary
    - varargs using ...
    - restrict
    - inline
    - ternary expressions () ? :
    - do {} while ()
 made right-recursive
"""

%token IDENTIFIER CONSTANT STRING_LITERAL SIZEOF
%token PTR_OP INC_OP DEC_OP LEFT_OP RIGHT_OP LE_OP GE_OP EQ_OP NE_OP
%token AND_OP OR_OP MUL_ASSIGN DIV_ASSIGN MOD_ASSIGN ADD_ASSIGN
%token SUB_ASSIGN LEFT_ASSIGN RIGHT_ASSIGN AND_ASSIGN
%token XOR_ASSIGN OR_ASSIGN 
%token CHAR SHORT INT LONG SIGNED UNSIGNED FLOAT DOUBLE VOID
%token BOOL STRUCT
%token CASE DEFAULT IF ELSE SWITCH WHILE 
%token FOR GOTO CONTINUE BREAK RETURN

%start translation_unit
%%

translation_unit
	: external_declaration translation_unit_prime
	;

translation_unit_prime
	: external_declaration translation_unit_prime
	| epsilon
	;

external_declaration
	: function_definition
	| declaration
	;

declaration
	: declaration_specifiers init_declarator_list ';'
	| declaration_specifiers ';' 
	;

declaration_specifiers
	: type_specifier declaration_specifiers_prime
	;

declaration_specifiers_prime
	: type_specifier declaration_specifiers_prime
	| epsilon
	;

init_declarator_list
	: init_declarator ',' init_declarator_list
	| init_declarator
	;

init_declarator
	: declarator '=' initializer
	| declarator 
	;

declarator
	: pointer direct_declarator
	| direct_declarator
	;

pointer
	: '*' pointer
	| '*'
	;

direct_declarator
	: direct_declarator_prime '[' assignment_expression ']'
	| direct_declarator_prime '[' '*' ']'
	| direct_declarator_prime '[' ']'
	| direct_declarator_prime '(' parameter_type_list ')'
	| direct_declarator_prime '(' identifier_list ')'
	| direct_declarator_prime '(' ')'
	;

direct_declarator_prime
	: '(' declarator ')'
	| IDENTIFIER
	;

function_definition
	: declaration_specifiers declarator declaration_list compound_statement
	| declaration_specifiers declarator compound_statement
	;

declaration_list
	: declaration declaration_list_prime
	;

declaration_list_prime
	: declaration declaration_list_prime
	| epsilon
	;

assignment_expression
	: unary_expression assignment_operator assignment_expression
	| conditional_expression
	;

primary_expression
	: '(' expression ')'
	| IDENTIFIER
	| CONSTANT
	| STRING_LITERAL
	;

unary_expression
	: postfix_expression
	| INC_OP unary_expression
	| DEC_OP unary_expression
	| unary_operator cast_expression
	| SIZEOF unary_expression
	| SIZEOF '(' type_name ')'
	;

cast_expression
	: '(' type_name ')' cast_expression
	| unary_expression
	;

unary_operator
	: '&'
	| '*'
	| '+'
	| '-'
	| '~'
	| '!'
	;

assignment_operator
	: '='
	| MUL_ASSIGN
	| DIV_ASSIGN
	| MOD_ASSIGN
	| ADD_ASSIGN
	| SUB_ASSIGN
	| LEFT_ASSIGN
	| RIGHT_ASSIGN
	| AND_ASSIGN
	| XOR_ASSIGN
	| OR_ASSIGN
	;

type_specifier
	: struct_or_union_specifier
	| VOID
	| CHAR
	| SHORT
	| INT
	| LONG
	| FLOAT
	| DOUBLE
	| SIGNED
	| UNSIGNED
	| BOOL
	| IDENTIFIER
	;

struct_or_union_specifier
	: struct_or_union IDENTIFIER '{' struct_declaration_list '}'
	| struct_or_union '{' struct_declaration_list '}'
	| struct_or_union IDENTIFIER
	;

struct_or_union
	: STRUCT
	;

parameter_type_list
	: parameter_list
	;

struct_declarator
	: declarator ':' constant_expression
	| ':' constant_expression
	| declarator
	;

type_name
	: specifier_qualifier_list abstract_declarator
	| specifier_qualifier_list
	;

parameter_declaration
	: declaration_specifiers declarator
	| declaration_specifiers abstract_declarator
	| declaration_specifiers
	;

abstract_declarator
	: pointer direct_abstract_declarator
	| direct_abstract_declarator
	| pointer
	;

initializer
	: '{' initializer_list ',' '}'
	| '{' initializer_list '}'
	| assignment_expression 
	;

block_item
	: declaration
	| statement
	;

expression_statement
	: expression ';'
	| ';'
	;

designator
	: '[' constant_expression ']'
	| '.' IDENTIFIER
	;

statement
	: labeled_statement
	| compound_statement
	| expression_statement
	| selection_statement
	| iteration_statement
	| jump_statement
	;

labeled_statement
	: IDENTIFIER ':' statement
	| CASE constant_expression ':' statement
	| DEFAULT ':' statement
	;

compound_statement
	: '{' block_item_list '}'
	| '{' '}'
	;

selection_statement
	: IF '(' expression ')' statement ELSE statement
	| IF '(' expression ')' statement
	| SWITCH '(' expression ')' statement
	;

iteration_statement
	: WHILE '(' expression ')' statement
	| FOR '(' expression_statement expression_statement expression ')' statement
	| FOR '(' expression_statement expression_statement ')' statement
	| FOR '(' declaration expression_statement expression ')' statement
	| FOR '(' declaration expression_statement ')' statement
	;

jump_statement
	: GOTO IDENTIFIER ';'
	| CONTINUE ';'
	| BREAK ';'
	| RETURN ';'
	| RETURN expression ';'
	;

block_item_list
	: block_item block_item_list_prime
	;

block_item_list_prime
	: block_item block_item_list_prime
	| epsilon
	;

designation
	: designator_list '='
	;

designator_list
	: designator designator_list_prime
	;

designator_list_prime
	: designator designator_list_prime
	| epsilon
	;

initializer_list
	: initializer_term initializer_list_prime
	;

initializer_list_prime
	: ',' initializer_term initializer_list_prime
	| epsilon
	;

initializer_term
	: designation initializer
	| initializer
	;

struct_declaration_list
	: struct_declaration struct_declarator_list
	| struct_declaration
	;

struct_declaration
	: specifier_qualifier_list struct_declarator_list ';'
	;

specifier_qualifier_list
	: type_specifier specifier_qualifier_list
	| type_specifier
	;

struct_declarator_list
	: struct_declarator struct_declarator_list_prime
	;

struct_declarator_list_prime
	: ',' struct_declarator struct_declarator_list_prime
	| epsilon
	;

parameter_list
	: parameter_declaration parameter_list_prime
	;

parameter_list_prime
	: ',' parameter_declaration parameter_list_prime
	| epsilon
	;

identifier_list
	: IDENTIFIER identifier_list_prime
	;

identifier_list_prime
	: ',' IDENTIFIER identifier_list_prime
	| epsilon
	;

argument_expression_list
	: assignment_expression argument_expression_list_prime
	;

argument_expression_list_prime
	: ',' assignment_expression argument_expression_list_prime
	| epsilon
	;

multiplicative_expression
	: cast_expression multiplicative_expression_prime
	;

multiplicative_expression_prime
	: '*' cast_expression multiplicative_expression_prime
	| '/' cast_expression multiplicative_expression_prime
	| '%' cast_expression multiplicative_expression_prime
	| epsilon
	;

additive_expression
	: multiplicative_expression additive_expression_prime
	;

additive_expression_prime
	: '+' multiplicative_expression additive_expression_prime 
	| '-' multiplicative_expression additive_expression_prime
	| epsilon
	;

shift_expression
	: additive_expression shift_expression_prime
	;

shift_expression_prime
	: LEFT_OP additive_expression shift_expression_prime
	| RIGHT_OP additive_expression shift_expression_prime
	| epsilon
	;

relational_expression
	: shift_expression relational_expression_prime
	;

relational_expression_prime
	: '<' shift_expression relational_expression_prime
	| '>' shift_expression relational_expression_prime
	| LE_OP shift_expression relational_expression_prime
	| GE_OP shift_expression relational_expression_prime
	| epsilon
	;

equality_expression
	: relational_expression equality_expression_prime
	;

equality_expression_prime
	: EQ_OP relational_expression equality_expression_prime
	| NE_OP relational_expression equality_expression_prime
	| epsilon
	;

and_expression
	: equality_expression and_expression_prime
	;

and_expression_prime
	: '&' equality_expression and_expression_prime
	| epsilon
	;

exclusive_or_expression
	: and_expression exclusive_or_expression_prime
	;

exclusive_or_expression_prime
	: '^' and_expression exclusive_or_expression_prime
	| epsilon
	;

inclusive_or_expression
	: exclusive_or_expression inclusive_or_expression_prime
	;

inclusive_or_expression_prime
	: '|' exclusive_or_expression inclusive_or_expression_prime
	| epsilon
	;

logical_and_expression
	: inclusive_or_expression logical_and_expression_prime
	;

logical_and_expression_prime
	: AND_OP inclusive_or_expression logical_and_expression_prime
	| epsilon
	;

logical_or_expression
	: logical_and_expression logical_or_expression_prime
	;

logical_or_expression_prime
	: OR_OP logical_and_expression logical_or_expression_prime
	| epsilon
	;

conditional_expression
	: logical_or_expression '?' expression ':' conditional_expression
	| logical_or_expression 
	;
	
constant_expression
	: conditional_expression
	;

expression
	: assignment_expression expression_prime
	;

expression_prime
	: ',' expression expression_prime
	| epsilon
	;

postfix_expression
	: '(' type_name ')' '{' initializer_list ',' '}' postfix_expression_prime
	| '(' type_name ')' '{' initializer_list '}' postfix_expression_prime
	| primary_expression  postfix_expression_prime
	;

postfix_expression_prime
	: '[' expression ']' postfix_expression_prime
	| '(' argument_expression_list ')' postfix_expression_prime
	| '(' ')' postfix_expression_prime
	| '.' IDENTIFIER postfix_expression_prime
	| PTR_OP IDENTIFIER postfix_expression_prime
	| INC_OP postfix_expression_prime
	| DEC_OP postfix_expression_prime
	| epsilon
	;

direct_abstract_declarator
	: '(' parameter_type_list ')' direct_abstract_declarator_prime
	| '(' abstract_declarator ')' direct_abstract_declarator_prime
	| '(' ')' direct_abstract_declarator_prime
	| '[' assignment_expression ']' direct_abstract_declarator_prime
	| '[' '*' ']' direct_abstract_declarator_prime
	| '[' ']' direct_abstract_declarator_prime
	;

direct_abstract_declarator_prime
 	: '[' ']' direct_abstract_declarator_prime
	| '[' assignment_expression ']' direct_abstract_declarator_prime
	| '(' parameter_type_list ')' direct_abstract_declarator_prime
	| '(' ')' direct_abstract_declarator_prime
	| '[' '*' ']' direct_abstract_declarator_prime
	| epsilon
	;